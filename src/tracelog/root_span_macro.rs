#[macro_export]
macro_rules! root_span {
    // Vanilla root span, no additional fields
    ($request:ident) => {
        root_span!($request,)
    };
    ($request:ident, $($field:tt)*) => {
        {
            let user_agent = $request
                .headers()
                .get("User-Agent")
                .map(|h| h.to_str().unwrap_or(""))
                .unwrap_or("");
            //let http_method = $crate::tracelog::root_span_macro::private::http_method_str($request.method());
            //    http.flavor         = %$crate::tracelog::root_span_macro::private::http_flavor($request.version()),
            let request_id = $crate::tracelog::root_span_macro::private::generate_request_id();
            let span = $crate::tracelog::root_span_macro::private::tracing::info_span!(
                "HTTP request",
                http.method         = %$request.method(),
                http.user_agent     = %user_agent,
                http.target         = %$request.uri().path_and_query().map(|p| p.as_str()).unwrap_or(""),
                http.status_code    = $crate::tracelog::root_span_macro::private::tracing::field::Empty,
                request_id          = %request_id,
                failure_class       = $crate::tracelog::root_span_macro::private::tracing::field::Empty,
                $($field)*
            );

            span
        }
    }
}

#[doc(hidden)]
pub mod private {
    //! This module exposes and re-exports various functions and traits as public in order to leverage them
    //! in the code generated by the `root_span` macro.
    //! Items in this module are not part of the public interface of `tracing-actix-web` - they are considered
    //! implementation details and will change without notice in patch, minor and major releases.
    use std::borrow::Cow;
    use axum::http::{Method, Version};

    pub use tracing;
    use uuid::Uuid;

    #[doc(hidden)]
    #[inline]

    #[doc(hidden)]
    #[inline]
    pub fn http_method_str(method: &Method) -> Cow<'static, str> {
        match method {
            &Method::OPTIONS => "OPTIONS".into(),
            &Method::GET => "GET".into(),
            &Method::POST => "POST".into(),
            &Method::PUT => "PUT".into(),
            &Method::DELETE => "DELETE".into(),
            &Method::HEAD => "HEAD".into(),
            &Method::TRACE => "TRACE".into(),
            &Method::CONNECT => "CONNECT".into(),
            &Method::PATCH => "PATCH".into(),
            other => other.to_string().into(),
        }
    }

    #[doc(hidden)]
    #[inline]
    pub fn http_flavor(version: Version) -> Cow<'static, str> {
        match version {
            Version::HTTP_09 => "0.9".into(),
            Version::HTTP_10 => "1.0".into(),
            Version::HTTP_11 => "1.1".into(),
            Version::HTTP_2 => "2.0".into(),
            Version::HTTP_3 => "3.0".into(),
            other => format!("{:?}", other).into(),
        }
    }

    #[doc(hidden)]
    #[inline]
    pub fn http_scheme(scheme: &str) -> Cow<'static, str> {
        match scheme {
            "http" => "http".into(),
            "https" => "https".into(),
            other => other.to_string().into(),
        }
    }

    #[doc(hidden)]
    pub fn generate_request_id() -> Uuid {
        Uuid::new_v4()
    }
}
